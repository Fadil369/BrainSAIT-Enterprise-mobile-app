//
// Copyright © 2023-2024 Apple Inc. All rights reserved.
//

extension Base {
  public static func parseTagOfflineSync(
    _ tllv: FPSServerTLLV, _ spcContainer: inout FPSServerSPCContainer
  ) throws {

    // 4B Version
    let tllvVersion = try readBigEndianU32(tllv.value, 0)

    // 4B Reserved
    let reserved = try readBigEndianU32(tllv.value, 4)

    if tllvVersion == 1 {
      // TLLV v1 should not be used anymore, but keep support for now

      if reserved != 0 {
        fpsLogError(FPSStatus.paramErr, "Invalid reserved field in Sync Rental TLLV")
        throw returnErrorStatus(FPSStatus.paramErr)
      }

      // 4B Duration to Expiry
      spcContainer.spcData.durationToRentalExpiry = try readBigEndianU32(tllv.value, 24)
    } else if tllvVersion == 2 {
      /*
            SyncTLLV v2:

                Field name              Byte range  Description
                TLLV tag                0-7         An 8-byte value of 0x77966de1dc1083ad.
                Total Length            8-11        The total length of this TLLV block in bytes. The length is determined by the amount of padding at the end of the block, if any; this value must be a multiple of 16 and greater than 32.
                Value Length            12-15       The length of the content of this TLLV block in bytes.
                Version                 16-19       TLLV version. For iOS 12.3 and above the version is set to 2. (Link to structure for v1)
                Reserved                20-23       This field is reserved and it’s value should be ignored
                Server Challenge        24-31       Unique 64 bit server challenge generated by the server
                Flags                   32-39       64 bit integer. See below for flags definition
                Title ID                40-55       128 bit title ID
                Duration to Expiry      56-59       Remaining license validity time in seconds.
                Records Invalidated     60-63       Total number of invalidated records
                Invalidated Content IDs 64-X        Concatenated array of invalidated Content IDs
            */

      // 8B Server Challenge
      spcContainer.spcData.syncServerChallenge = try readBigEndianU64(tllv.value, 8)

      // 8B Flags
      spcContainer.spcData.syncFlags = try readBigEndianU64(tllv.value, 16)

      // 16B Title ID
      spcContainer.spcData.syncTitleId = try readBytes(
        tllv.value, 24, base_constants.FPS_MAX_TITLE_ID_LENGTH)

      // 4B Duration to Expiry
      spcContainer.spcData.durationToRentalExpiry = try readBigEndianU32(tllv.value, 40)

      // 4B Records Invalidated
      spcContainer.spcData.recordsDeleted = Int(try readBigEndianU32(tllv.value, 44))

      if spcContainer.spcData.recordsDeleted > 250 {
        fpsLogError(
          FPSStatus.internalErr,
          "parseSyncRental: abnormally large number of deleted records: \(spcContainer.spcData.recordsDeleted)"
        )
        throw returnErrorStatus(FPSStatus.internalErr)
      } else if spcContainer.spcData.recordsDeleted > 0 {
        let recordsSizeToRead =
          Int(spcContainer.spcData.recordsDeleted)
          * base_constants.FPS_OFFLINE_CONTENTID_LENGTH

        // Invalidated Content IDs (variable size)
        spcContainer.spcData.deletedContentIDs = try readBytes(tllv.value, 48, recordsSizeToRead)
      }
    }
  }
}
